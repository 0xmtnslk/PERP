#!/usr/bin/env python3
"""
√áALI≈ûAN TELEGRAM BOT - Callback problemleri √ß√∂z√ºld√º
Architect tool √∂nerileri ile optimize edildi
"""
import os
import sqlite3
import logging
import asyncio
import re
import time
import threading
import queue
from datetime import datetime, timedelta
from contextlib import contextmanager
from typing import Optional, Dict, Any
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from telegram.error import BadRequest

# ‚úÖ ROBUST INPUT VALIDATION
class ValidationError(Exception):
    """API input validation error"""
    pass

class InputValidator:
    """Robust input validator to prevent bot crashes"""
    
    @staticmethod
    def validate_api_triplet(text: str) -> tuple[str, str, str]:
        """
        Robust API credentials validation
        Returns: (api_key, secret_key, passphrase) or raises ValidationError
        """
        # Guard: Basic checks
        if not text or not isinstance(text, str):
            raise ValidationError("‚ùå Bo≈ü giri≈ü. Format: API_KEY,SECRET_KEY,PASSPHRASE")
        
        # Length limit for security  
        if len(text) > 512:
            raise ValidationError("‚ùå Giri≈ü √ßok uzun (max 512 karakter)")
        
        # Normalize input
        text = text.strip()
        if '\n' in text or '\r' in text:
            raise ValidationError("‚ùå Tek satƒ±rda girin. Format: API_KEY,SECRET_KEY,PASSPHRASE")
        
        # Split validation
        parts = text.split(',')
        if len(parts) != 3:
            raise ValidationError("‚ùå 3 deƒüer gerekli. Format: API_KEY,SECRET_KEY,PASSPHRASE\n√ñrnek: bg_123abc,sk_456def,mypass123")
        
        # Clean and validate each part
        api_key = parts[0].strip()
        secret_key = parts[1].strip()
        passphrase = parts[2].strip()
        
        # Length validation
        if len(api_key) < 10 or len(api_key) > 128:
            raise ValidationError("‚ùå API Key uzunluƒüu 10-128 karakter olmalƒ±")
        
        if len(secret_key) < 20 or len(secret_key) > 256:
            raise ValidationError("‚ùå Secret Key uzunluƒüu 20-256 karakter olmalƒ±")
        
        if len(passphrase) < 6 or len(passphrase) > 128:
            raise ValidationError("‚ùå Passphrase uzunluƒüu 6-128 karakter olmalƒ±")
        
        # Format validation with regex
        if not re.match(r'^[A-Za-z0-9_\-]+$', api_key):
            raise ValidationError("‚ùå API Key sadece harf, rakam, _ ve - i√ßermeli")
        
        if not re.match(r'^[A-Za-z0-9_\-+/=]+$', secret_key):
            raise ValidationError("‚ùå Secret Key ge√ßersiz karakter i√ßeriyor")
        
        if not re.match(r'^[A-Za-z0-9!@#%\^&*()_+\-=?.,:;]+$', passphrase):
            raise ValidationError("‚ùå Passphrase ge√ßersiz karakter i√ßeriyor")
        
        # All parts must be non-empty after strip
        if not api_key or not secret_key or not passphrase:
            raise ValidationError("‚ùå T√ºm alanlar dolu olmalƒ±. Bo≈ü alan bƒ±rakma")
        
        return api_key, secret_key, passphrase
    
    @staticmethod
    def sanitize_input(text: str) -> str:
        """Clean user input safely"""
        if not text:
            return ""
        # Remove dangerous characters
        dangerous_chars = ['<', '>', '&', '"', "'", ';', '(', ')', '{', '}', '[', ']']
        for char in dangerous_chars:
            text = text.replace(char, '')
        return text.strip()[:200]

# ‚úÖ USER STATE TIMEOUT MANAGER
class UserStateTimeoutManager:
    """Manages user state timeouts to prevent stuck users"""
    
    def __init__(self):
        self.user_state_timestamps = {}  # user_id -> timestamp
        self.timeout_minutes = 10  # 10 minutes timeout
    
    def set_user_waiting_state(self, user_id: int, state: str, context: ContextTypes.DEFAULT_TYPE):
        """Set user state with timestamp"""
        context.user_data['waiting'] = state
        self.user_state_timestamps[user_id] = time.time()
        logger.info(f"‚úÖ User {user_id} state set to '{state}' with timeout")
    
    def clear_user_state(self, user_id: int, context: ContextTypes.DEFAULT_TYPE):
        """Clear user state and timestamp"""
        if user_id in self.user_state_timestamps:
            del self.user_state_timestamps[user_id]
        
        if context.user_data.get('waiting'):
            context.user_data['waiting'] = None
            context.user_data['api_failures'] = 0
            logger.info(f"‚úÖ User {user_id} state cleared")
    
    async def check_and_cleanup_expired_states(self, application):
        """Check for expired user states and cleanup"""
        try:
            current_time = time.time()
            timeout_seconds = self.timeout_minutes * 60
            expired_users = []
            
            for user_id, timestamp in self.user_state_timestamps.items():
                if current_time - timestamp > timeout_seconds:
                    expired_users.append(user_id)
            
            # Cleanup expired users
            for user_id in expired_users:
                try:
                    # Clear our tracking
                    del self.user_state_timestamps[user_id]
                    
                    # Try to notify user if possible
                    try:
                        await application.bot.send_message(
                            chat_id=user_id,
                            text="‚è∞ **Zaman A≈üƒ±mƒ±**\n\n"
                                 f"API giri≈ü i≈üleminiz {self.timeout_minutes} dakika sonra zaman a≈üƒ±mƒ±na uƒüradƒ±\n"
                                 "üîÑ Tekrar denemek i√ßin: /start",
                            parse_mode='Markdown'
                        )
                        logger.info(f"‚úÖ Timeout notification sent to user {user_id}")
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è Could not notify user {user_id} about timeout: {e}")
                    
                    logger.info(f"üßπ Cleaned up expired state for user {user_id}")
                    
                except Exception as e:
                    logger.error(f"‚ùå Error cleaning up user {user_id}: {e}")
                    
        except Exception as e:
            logger.error(f"‚ùå Error in state cleanup task: {e}")
    
    def is_state_expired(self, user_id: int) -> bool:
        """Check if user state has expired"""
        if user_id not in self.user_state_timestamps:
            return False
        
        current_time = time.time()
        timeout_seconds = self.timeout_minutes * 60
        return (current_time - self.user_state_timestamps[user_id]) > timeout_seconds

# ‚úÖ GLOBAL TIMEOUT MANAGER INSTANCE
timeout_manager = UserStateTimeoutManager()

# ‚úÖ PRODUCTION-GRADE: Robust Database Connection Manager
class DatabaseManager:
    """
    Thread-safe database manager with connection pooling, retry logic, and
    proper concurrency handling to prevent system crashes.
    """
    
    def __init__(self, db_path: str, pool_size: int = 5):
        self.db_path = db_path
        self.pool_size = pool_size
        self._connection_pool = queue.Queue(maxsize=pool_size)
        self._pool_lock = threading.Lock()
        self._write_queue = queue.Queue()
        self._write_worker_running = False
        self._shutdown = False
        
        # Initialize connection pool
        self._init_connection_pool()
        
        # Start write worker thread for serialized writes
        self._start_write_worker()
        
        logger.info(f"‚úÖ DatabaseManager initialized with {pool_size} connections")
    
    def _init_connection_pool(self):
        """Initialize connection pool with optimized SQLite settings"""
        for _ in range(self.pool_size):
            conn = self._create_optimized_connection()
            self._connection_pool.put(conn)
    
    def _create_optimized_connection(self) -> sqlite3.Connection:
        """Create SQLite connection with optimal concurrent access settings"""
        conn = sqlite3.connect(
            self.db_path,
            timeout=30.0,  # 30 second timeout for busy database
            check_same_thread=False  # Allow cross-thread usage
        )
        
        # ‚úÖ CRITICAL: Optimal SQLite pragmas for concurrency
        conn.execute('PRAGMA journal_mode=WAL')  # Write-Ahead Logging for concurrent reads
        conn.execute('PRAGMA synchronous=NORMAL')  # Balance safety and performance
        conn.execute('PRAGMA wal_autocheckpoint=1000')  # Checkpoint every 1000 pages
        conn.execute('PRAGMA wal_checkpoint_nowait')  # Non-blocking checkpoints
        conn.execute('PRAGMA busy_timeout=30000')  # 30 second busy timeout
        conn.execute('PRAGMA cache_size=-64000')  # 64MB cache
        conn.execute('PRAGMA temp_store=MEMORY')  # Keep temp tables in memory
        
        return conn
    
    @contextmanager
    def get_connection(self):
        """Get connection from pool with automatic cleanup"""
        conn = None
        try:
            # Get connection from pool with timeout
            conn = self._connection_pool.get(timeout=10.0)
            yield conn
        except queue.Empty:
            # Pool exhausted - create temporary connection
            logger.warning("üî∂ Connection pool exhausted, creating temporary connection")
            conn = self._create_optimized_connection()
            yield conn
        finally:
            if conn:
                try:
                    # Return to pool if possible
                    if not self._shutdown and self._connection_pool.qsize() < self.pool_size:
                        self._connection_pool.put_nowait(conn)
                    else:
                        conn.close()
                except queue.Full:
                    conn.close()
                except Exception as e:
                    logger.error(f"‚ùå Error returning connection to pool: {e}")
                    try:
                        conn.close()
                    except:
                        pass
    
    def _start_write_worker(self):
        """Start background thread for serialized database writes"""
        if not self._write_worker_running:
            self._write_worker_running = True
            worker_thread = threading.Thread(target=self._write_worker, daemon=True)
            worker_thread.start()
            logger.info("‚úÖ Database write worker started")
    
    def _write_worker(self):
        """Background worker to process write operations serially"""
        while not self._shutdown:
            try:
                # Get write operation with timeout
                write_op = self._write_queue.get(timeout=1.0)
                if write_op is None:  # Shutdown signal
                    break
                
                # Execute write operation with retry
                self._execute_write_with_retry(write_op)
                self._write_queue.task_done()
                
            except queue.Empty:
                continue
            except Exception as e:
                logger.error(f"‚ùå Write worker error: {e}")
    
    def _execute_write_with_retry(self, write_op: Dict[str, Any]):
        """Execute write operation with exponential backoff retry"""
        operation = write_op['operation']
        params = write_op['params']
        callback = write_op.get('callback')
        max_retries = 5
        base_delay = 0.1  # 100ms base delay
        
        for attempt in range(max_retries):
            try:
                with self.get_connection() as conn:
                    cursor = conn.cursor()
                    
                    if operation == 'update_setting':
                        self._do_update_setting(cursor, conn, **params)
                    elif operation == 'save_user':
                        self._do_save_user(cursor, conn, **params)
                    else:
                        logger.error(f"‚ùå Unknown write operation: {operation}")
                        return
                    
                    # Success - notify callback if provided
                    if callback:
                        callback(success=True)
                    return
                    
            except sqlite3.OperationalError as e:
                if "database is locked" in str(e).lower() or "busy" in str(e).lower():
                    if attempt < max_retries - 1:
                        delay = base_delay * (2 ** attempt)  # Exponential backoff
                        logger.warning(f"‚ö†Ô∏è Database busy (attempt {attempt + 1}/{max_retries}), retrying in {delay:.2f}s")
                        time.sleep(delay)
                        continue
                
                logger.error(f"‚ùå Database operation failed after {max_retries} attempts: {e}")
                if callback:
                    callback(success=False, error=str(e))
                return
                
            except Exception as e:
                logger.error(f"‚ùå Unexpected database error: {e}")
                if callback:
                    callback(success=False, error=str(e))
                return
    
    def _do_update_setting(self, cursor: sqlite3.Cursor, conn: sqlite3.Connection, 
                          user_id: int, key: str, value: Any):
        """Execute update setting operation"""
        # Validate column name to prevent SQL injection
        allowed_columns = ['api_key', 'secret_key', 'passphrase', 'amount_usdt', 
                          'leverage', 'take_profit_percent', 'active']
        if key not in allowed_columns:
            raise ValueError(f"Invalid column name: {key}")
        
        cursor.execute(f'UPDATE user_settings SET {key} = ? WHERE user_id = ?', 
                      (value, user_id))
        conn.commit()
        logger.info(f"‚úÖ Updated {key} for user {user_id}")
    
    def _do_save_user(self, cursor: sqlite3.Cursor, conn: sqlite3.Connection, 
                     user_id: int, username: str):
        """Execute save user operation"""
        cursor.execute('INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)', 
                      (user_id, username))
        cursor.execute('INSERT OR IGNORE INTO user_settings (user_id) VALUES (?)', 
                      (user_id,))
        conn.commit()
        logger.info(f"‚úÖ Saved user {user_id}")
    
    def get_user_settings(self, user_id: int) -> Optional[Dict[str, Any]]:
        """Get user settings with retry logic"""
        max_retries = 3
        for attempt in range(max_retries):
            try:
                with self.get_connection() as conn:
                    cursor = conn.cursor()
                    cursor.execute('''
                        SELECT api_key, secret_key, passphrase, amount_usdt, leverage, take_profit_percent, active
                        FROM user_settings WHERE user_id = ?
                    ''', (user_id,))
                    result = cursor.fetchone()
                    
                    if result:
                        return {
                            'api_key': result[0] or '',
                            'secret_key': result[1] or '',
                            'passphrase': result[2] or '',
                            'amount': result[3],
                            'leverage': result[4],
                            'take_profit': result[5],
                            'active': bool(result[6])
                        }
                    return None
                    
            except sqlite3.OperationalError as e:
                if "database is locked" in str(e).lower() and attempt < max_retries - 1:
                    time.sleep(0.1 * (attempt + 1))  # Progressive delay
                    continue
                logger.error(f"‚ùå Database read error: {e}")
                return None
            except Exception as e:
                logger.error(f"‚ùå Unexpected read error: {e}")
                return None
        
        logger.error(f"‚ùå Failed to get user settings for {user_id} after {max_retries} attempts")
        return None
    
    def update_setting_async(self, user_id: int, key: str, value: Any, callback=None):
        """Queue async update operation"""
        write_op = {
            'operation': 'update_setting',
            'params': {'user_id': user_id, 'key': key, 'value': value},
            'callback': callback
        }
        
        try:
            self._write_queue.put_nowait(write_op)
            logger.info(f"‚úÖ Queued update {key} for user {user_id}")
        except queue.Full:
            logger.error(f"‚ùå Write queue full, dropping update for user {user_id}")
            if callback:
                callback(success=False, error="Write queue full")
    
    def save_user_async(self, user_id: int, username: str, callback=None):
        """Queue async save user operation"""
        write_op = {
            'operation': 'save_user',
            'params': {'user_id': user_id, 'username': username},
            'callback': callback
        }
        
        try:
            self._write_queue.put_nowait(write_op)
            logger.info(f"‚úÖ Queued save user {user_id}")
        except queue.Full:
            logger.error(f"‚ùå Write queue full, dropping save for user {user_id}")
            if callback:
                callback(success=False, error="Write queue full")
    
    def shutdown(self):
        """Shutdown database manager gracefully"""
        logger.info("üîÑ Shutting down DatabaseManager...")
        self._shutdown = True
        self._write_queue.put(None)  # Signal shutdown
        
        # Close all pooled connections
        while not self._connection_pool.empty():
            try:
                conn = self._connection_pool.get_nowait()
                conn.close()
            except:
                pass
        
        logger.info("‚úÖ DatabaseManager shutdown complete")

# ‚úÖ PRODUCTION-GRADE: Safe async task wrapper
async def safe_create_task(coro, task_name: str = "unknown"):
    """
    Safe wrapper for asyncio.create_task to prevent unhandled exceptions
    """
    try:
        task = asyncio.create_task(coro)
        return await task
    except Exception as e:
        logger.error(f"‚ùå Background task '{task_name}' failed: {e}")
        # Don't re-raise - keep bot running
        return None

def heartbeat_writer():
    """Health file'ƒ±nƒ± her 60 saniyede bir g√ºnceller"""
    health_file = "production/monitoring/telegram_bot_health.txt"
    while True:
        try:
            with open(health_file, 'w') as f:
                f.write(f"{datetime.now().isoformat()}\n")
        except Exception as e:
            print(f"‚ùå Health file yazma hatasƒ±: {e}")
        time.sleep(60)

def start_heartbeat():
    """Heartbeat thread'ini ba≈ülat"""
    heartbeat_thread = threading.Thread(target=heartbeat_writer, daemon=True)
    heartbeat_thread.start()
    print("üíì Telegram Bot heartbeat ba≈ülatƒ±ldƒ±")

# ‚úÖ SECURITY-FIRST LOGGING CONFIGURATION
# Prevent sensitive bot token from appearing in logs
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# üîí CRITICAL SECURITY: Suppress httpx request logs that contain bot token
httpx_logger = logging.getLogger('httpx')
httpx_logger.setLevel(logging.WARNING)  # Suppress INFO level request URLs

# üîí SECURITY: Suppress telegram library HTTP logs
telegram_logger = logging.getLogger('telegram.ext')
telegram_logger.setLevel(logging.WARNING)

# üîí SECURITY: Suppress urllib3 logs that might contain URLs
urllib3_logger = logging.getLogger('urllib3')
urllib3_logger.setLevel(logging.WARNING)

# ‚úÖ PRODUCTION-GRADE: Custom filter to strip tokens from any remaining logs
class TokenSanitizingFilter(logging.Filter):
    """Remove bot tokens from log messages as additional security layer"""
    
    def filter(self, record):
        if hasattr(record, 'msg') and isinstance(record.msg, str):
            # Pattern to match bot tokens in URLs
            import re
            # Bot tokens follow pattern: digits:alphanumeric_string
            token_pattern = r'/bot\d+:[A-Za-z0-9_-]+/'
            record.msg = re.sub(token_pattern, '/bot[TOKEN_REDACTED]/', record.msg)
        return True

# Apply token filter to all loggers as fallback security
token_filter = TokenSanitizingFilter()
logging.getLogger().addFilter(token_filter)

BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')

class WorkingTelegramBot:
    def __init__(self):
        self.db_path = 'trading_bot.db'
        # ‚úÖ PRODUCTION-GRADE: Robust database manager with connection pooling
        self.init_database()
        self.db_manager = DatabaseManager(self.db_path, pool_size=10)
    
    def init_database(self):
        """Database initialize et - Thread-safe initialization"""
        # Use simple connection for initial setup only
        conn = sqlite3.connect(self.db_path, timeout=30.0)
        try:
            # Enable WAL mode early
            conn.execute('PRAGMA journal_mode=WAL')
            cursor = conn.cursor()
            
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    username TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS user_settings (
                    user_id INTEGER PRIMARY KEY,
                    api_key TEXT,
                    secret_key TEXT,
                    passphrase TEXT,
                    amount_usdt REAL DEFAULT 20.0,
                    leverage INTEGER DEFAULT 10,
                    take_profit_percent REAL DEFAULT 100.0,
                    active INTEGER DEFAULT 1,
                    FOREIGN KEY (user_id) REFERENCES users (user_id)
                )
            ''')
            
            conn.commit()
            logger.info("‚úÖ Database initialized with WAL mode")
        finally:
            conn.close()
    
    def save_user(self, user_id, username):
        """Kullanƒ±cƒ± kaydet - Async queue-based for concurrency safety"""
        # Use callback to handle completion
        def on_save_complete(success, error=None):
            if not success:
                logger.error(f"‚ùå Failed to save user {user_id}: {error}")
            else:
                logger.info(f"‚úÖ User {user_id} saved successfully")
        
        self.db_manager.save_user_async(user_id, username, callback=on_save_complete)
    
    def get_user_settings(self, user_id):
        """Kullanƒ±cƒ± ayarlarƒ±nƒ± getir - Robust with retry logic"""
        return self.db_manager.get_user_settings(user_id)
    
    def update_setting(self, user_id, key, value):
        """Tek ayar g√ºncelle - Async queue-based for concurrency safety"""
        # Use callback to handle completion
        def on_update_complete(success, error=None):
            if not success:
                logger.error(f"‚ùå Failed to update {key} for user {user_id}: {error}")
            else:
                logger.info(f"‚úÖ Updated {key} for user {user_id} successfully")
        
        self.db_manager.update_setting_async(user_id, key, value, callback=on_update_complete)

# Bot instance
bot = WorkingTelegramBot()

async def send_menu(chat_id, context, user_id=None):
    """Ana men√ºy√º g√∂nder - g√ºvenli ≈üekilde"""
    try:
        settings = bot.get_user_settings(user_id or chat_id)
        has_api = bool(settings and settings['api_key'])
        
        keyboard = [
            [InlineKeyboardButton("üîë API Ayarlarƒ±", callback_data="api")],
            [InlineKeyboardButton("üí∞ Miktar", callback_data="amount"), 
             InlineKeyboardButton("‚ö° Leverage", callback_data="leverage")],
            [InlineKeyboardButton("üìà Take Profit %", callback_data="tp")],
            [InlineKeyboardButton("üìä Durumum", callback_data="status")]
        ]
        
        if has_api:
            keyboard.append([InlineKeyboardButton("üß™ Test Sistemi", callback_data="test")])
        
        text = f"""üöÄ **Kripto Otomatik Trading Bot**

**Sistem:** Upbit yeni coin ‚Üí Otomatik long
**Durum:** {'‚úÖ Hazƒ±r' if has_api else '‚öôÔ∏è Kurulum gerekli'}

Ayarlarƒ±nƒ± yap, sistem otomatik √ßalƒ±≈üsƒ±n!"""

        await context.bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"‚ùå Menu send error: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Bot ba≈ülat"""
    user = update.effective_user
    bot.save_user(user.id, user.username)
    
    await send_menu(update.effective_chat.id, context, user.id)

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Button i≈ülemleri - HIZLI callback handling"""
    query = update.callback_query
    
    # ‚úÖ ƒ∞LK √ñNCE HEMEN ANSWER - Architect √∂nerisi
    try:
        await query.answer(cache_time=0)
    except BadRequest as e:
        if "too old" in str(e).lower():
            await query.message.reply_text(
                "‚ö†Ô∏è Bu tu≈ü ge√ßersiz oldu. /start ile yeniden deneyin."
            )
            return
        logger.error(f"Callback answer error: {e}")
        return
    
    user_id = query.from_user.id
    data = query.data
    
    logger.info(f"Button: {data} by user {user_id}")
    
    try:
        settings = bot.get_user_settings(user_id)
        
        if data == "api":
            await query.edit_message_text(
                "üîë **API Bilgilerini Girin**\n\n"
                "Format: `API_KEY,SECRET_KEY,PASSPHRASE`\n\n"
                "√ñrnek:\n"
                "`bg_123abc,sk_456def,mypass123`\n\n"
                "‚ö†Ô∏è G√ºvenlik: Bilgiler ≈üifrelenmi≈ü saklanƒ±r\n"
                "üîô Geri: /start",
                parse_mode='Markdown'
            )
            timeout_manager.set_user_waiting_state(user_id, 'api', context)
            
        elif data == "amount":
            keyboard = [
                [InlineKeyboardButton("üíµ 10 USDT", callback_data="amount_10"),
                 InlineKeyboardButton("üíµ 20 USDT", callback_data="amount_20")],
                [InlineKeyboardButton("üíµ 50 USDT", callback_data="amount_50"),
                 InlineKeyboardButton("üíµ 100 USDT", callback_data="amount_100")],
                [InlineKeyboardButton("üîô Ana Men√º", callback_data="back")]
            ]
            
            await query.edit_message_text(
                f"üí∞ **ƒ∞≈ülem Miktarƒ± Se√ß**\n\n"
                f"≈ûu anki: {settings['amount']} USDT\n\n"
                f"Her yeni coin i√ßin bu miktar kullanƒ±lacak:",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            
        elif data.startswith("amount_"):
            amount = float(data.split("_")[1])
            # ‚úÖ PRODUCTION-GRADE: Safe background update
            asyncio.create_task(safe_create_task(
                update_user_amount(user_id, amount, query), 
                "update_user_amount"
            ))
            
        elif data == "leverage":
            keyboard = [
                [InlineKeyboardButton("‚ö° 5x", callback_data="lev_5"),
                 InlineKeyboardButton("‚ö° 10x", callback_data="lev_10")],
                [InlineKeyboardButton("‚ö° 20x", callback_data="lev_20"),
                 InlineKeyboardButton("‚ö° 50x", callback_data="lev_50")],
                [InlineKeyboardButton("üîô Ana Men√º", callback_data="back")]
            ]
            
            await query.edit_message_text(
                f"‚ö° **Leverage Se√ß**\n\n"
                f"≈ûu anki: {settings['leverage']}x\n\n"
                f"Risk seviyeni belirle:",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            
        elif data.startswith("lev_"):
            leverage = int(data.split("_")[1])
            asyncio.create_task(safe_create_task(
                update_user_leverage(user_id, leverage, query), 
                "update_user_leverage"
            ))
            
        elif data == "tp":
            keyboard = [
                [InlineKeyboardButton("üìà 50%", callback_data="tp_50"),
                 InlineKeyboardButton("üìà 100%", callback_data="tp_100")],
                [InlineKeyboardButton("üìà 200%", callback_data="tp_200"),
                 InlineKeyboardButton("üìà 500%", callback_data="tp_500")],
                [InlineKeyboardButton("üîô Ana Men√º", callback_data="back")]
            ]
            
            await query.edit_message_text(
                f"üìà **Take Profit % Se√ß**\n\n"
                f"≈ûu anki: %{settings['take_profit']}\n\n"
                f"Kar hedefini belirle:",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            
        elif data.startswith("tp_"):
            tp = float(data.split("_")[1])
            asyncio.create_task(safe_create_task(
                update_user_tp(user_id, tp, query), 
                "update_user_tp"
            ))
            
        elif data == "status":
            has_api = bool(settings['api_key'])
            status_text = f"""üìä **Ayarlarƒ±m**

üîë **API:** {'‚úÖ Kayƒ±tlƒ±' if has_api else '‚ùå Eksik'}
üí∞ **Miktar:** {settings['amount']} USDT  
‚ö° **Leverage:** {settings['leverage']}x
üìà **Take Profit:** %{settings['take_profit']}
ü§ñ **Durum:** {'üü¢ Aktif' if settings['active'] else 'üî¥ Pasif'}

**Sistem otomatik √ßalƒ±≈üƒ±yor:**
‚Ä¢ Upbit yeni coin listesi ‚Üí Anƒ±nda long a√ßar
‚Ä¢ ƒ∞≈ülem bildirimi + acil stop butonu
‚Ä¢ TP'ye ula≈üƒ±nca otomatik sat + kar-zarar raporu"""
            
            keyboard = [[InlineKeyboardButton("üîô Ana Men√º", callback_data="back")]]
            
            await query.edit_message_text(
                status_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            
        elif data == "test":
            await query.edit_message_text(
                "üß™ **Test Sistemi Ba≈ülatƒ±lƒ±yor...**\n\n"
                "TESTCOIN fake detection g√∂nderiliyor...\n"
                "‚è≥ Sonu√ßlarƒ± bekleyin...",
                parse_mode='Markdown'
            )
            
            # ‚úÖ Test trigger arka planda
            asyncio.create_task(safe_create_task(
                trigger_test_trade(query), 
                "trigger_test_trade"
            ))
            
        elif data == "stop_position":
            # ‚úÖ STOP POSITION BUTTON - Close all open positions
            await handle_stop_position(query, user_id)
            
        elif data == "back":
            # ‚úÖ Ana men√º g√ºvenli ≈üekilde
            await send_menu(query.message.chat_id, context, user_id)
            
    except BadRequest as e:
        if "too old" in str(e).lower() or "query is invalid" in str(e).lower():
            await query.message.reply_text(
                "‚ö†Ô∏è Bu i≈ülem zaman a≈üƒ±mƒ±na uƒüradƒ±. /start ile yeniden deneyin."
            )
        else:
            logger.error(f"BadRequest in callback: {e}")
    except Exception as e:
        logger.error(f"‚ùå Callback error: {e}")

# ‚úÖ Arka plan g√∂revleri - blocking olmayan
async def update_user_amount(user_id, amount, query):
    """Amount g√ºncellemeyi arka planda yap"""
    try:
        bot.update_setting(user_id, 'amount_usdt', amount)
        await query.edit_message_text(
            f"‚úÖ **Miktar G√ºncellendi**\n\n"
            f"Yeni miktar: **{amount} USDT**\n\n"
            f"üîô /start ile ana men√ºye d√∂n",
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"Amount update error: {e}")

async def update_user_leverage(user_id, leverage, query):
    """Leverage g√ºncellemeyi arka planda yap"""
    try:
        bot.update_setting(user_id, 'leverage', leverage)
        await query.edit_message_text(
            f"‚úÖ **Leverage G√ºncellendi**\n\n"
            f"Yeni leverage: **{leverage}x**\n\n"
            f"üîô /start ile ana men√ºye d√∂n",
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"Leverage update error: {e}")

async def update_user_tp(user_id, tp, query):
    """TP g√ºncellemeyi arka planda yap"""
    try:
        bot.update_setting(user_id, 'take_profit_percent', tp)
        await query.edit_message_text(
            f"‚úÖ **Take Profit G√ºncellendi**\n\n"
            f"Yeni hedef: **%{tp}**\n\n"
            f"üîô /start ile ana men√ºye d√∂n",
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"TP update error: {e}")

async def handle_stop_position(query, user_id):
    """Handle stop position button - close all positions"""
    try:
        await query.edit_message_text(
            "üö® **POZƒ∞SYON KAPATILIYOR...**\n\n"
            "‚è≥ T√ºm a√ßƒ±k pozisyonlar kapalƒ±nƒ±yor...\n"
            "üí∞ Kar/zarar hesaplanƒ±yor...",
            parse_mode='Markdown'
        )
        
        # Get user's API credentials
        settings = bot.get_user_settings(user_id)
        if not settings or not settings['api_key']:
            await query.edit_message_text(
                "‚ùå **HATA**\n\n"
                "API anahtarlarƒ± bulunamadƒ±!\n"
                "üîë √ñnce API ayarlarƒ±nƒ± yapƒ±n",
                parse_mode='Markdown'
            )
            return
        
        # Use existing long.py close_all_positions function directly
        import sys
        import os
        sys.path.append(os.path.join(os.path.dirname(__file__), 'PERP'))
        
        try:
            from long import close_all_positions
            # ‚úÖ PRODUCTION-GRADE: API call with timeout and retry
            result = await asyncio.wait_for(
                asyncio.to_thread(
                    close_all_positions,
                    settings['api_key'], 
                    settings['secret_key'], 
                    settings['passphrase']
                ),
                timeout=30.0  # 30 second timeout for API calls
            )
            success = True
            error_msg = None
        except asyncio.TimeoutError:
            success = False
            error_msg = "API timeout (30s) - Bitget baƒülantƒ± sorunu"
        except ImportError as e:
            success = False
            error_msg = f"Import error: {e}"
        except Exception as e:
            success = False
            error_msg = str(e)
            logger.error(f"‚ùå External API call failed: {e}")
        
        if success:
            # ‚úÖ Show detailed P&L results from close_all_positions
            pnl_info = ""
            if isinstance(result, dict):
                total_pnl = result.get('total_pnl', 0)
                positions_count = result.get('positions_count', 0)
                pnl_emoji = "üü¢" if total_pnl >= 0 else "üî¥"
                pnl_info = f"\nüí∞ **P&L:** {pnl_emoji} ${total_pnl:.2f}\nüìä **Pozisyonlar:** {positions_count} adet"
            
            await query.edit_message_text(
                f"‚úÖ **POZƒ∞SYONLAR KAPATILDI!**{pnl_info}\n\n"
                f"üìä **Durumu:** T√ºm pozisyonlar kapatƒ±ldƒ±\n"
                f"üí∞ **Detaylar:** Kar/zarar hesaplandƒ±\n\n"
                f"‚úÖ ƒ∞≈ülem tamamlandƒ±!",
                parse_mode='Markdown'
            )
        else:
            await query.edit_message_text(
                f"‚ùå **POZISYON KAPATMA HATASI**\n\n"
                f"Hata: {error_msg or 'Bilinmeyen hata'}\n\n"
                f"üîÑ Tekrar deneyin veya manuel kontrol edin",
                parse_mode='Markdown'
            )
            
    except Exception as e:
        logger.error(f"Stop position error: {e}")
        await query.edit_message_text(
            "‚ùå **Sƒ∞STEM HATASI**\n\n"
            "Pozisyon kapatma sƒ±rasƒ±nda hata!\n"
            "üõ†Ô∏è Teknik destek ile ileti≈üime ge√ßin",
            parse_mode='Markdown'
        )

async def trigger_test_trade(query):
    """Test trade'i arka planda tetikle"""
    try:
        # Test trigger dosyasƒ±na yaz
        with open("PERP/new_coin_output.txt", "w") as f:
            f.write("TESTCOINUSDT_UMCBL")
        
        await query.message.reply_text(
            "‚úÖ **Test Trigger G√∂nderildi!**\n\n"
            "üöÄ Sistem TESTCOIN i√ßin otomatik i≈ülem a√ßmaya √ßalƒ±≈üacak\n"
            "üì± Bildirim gelecek ve acil stop butonu aktif olacak\n\n"
            "üìä Sonu√ßlarƒ± takip edin!",
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"Test trigger error: {e}")
        await query.message.reply_text(f"‚ùå Test hatasƒ±: {e}")

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """üõ°Ô∏è ROBUST Metin mesajlarƒ± i≈üle - Crash korumalƒ±"""
    try:
        # ‚úÖ GUARD: Basic safety checks
        if not update or not update.message or not update.message.text:
            logger.warning("Message handler: Invalid update or empty message")
            return
        
        user_id = update.effective_user.id
        text = update.message.text
        
        # ‚úÖ GUARD: Input length protection  
        if len(text) > 512:
            await update.message.reply_text(
                "‚ùå Mesaj √ßok uzun (max 512 karakter)\nüîô /start ile ana men√º"
            )
            return
        
        # ‚úÖ API INPUT HANDLING WITH ROBUST VALIDATION
        if context.user_data.get('waiting') == 'api':
            # ‚úÖ CHECK STATE TIMEOUT FIRST
            if timeout_manager.is_state_expired(user_id):
                timeout_manager.clear_user_state(user_id, context)
                await update.message.reply_text(
                    "‚è∞ **API giri≈üiniz zaman a≈üƒ±mƒ±na uƒüradƒ±**\n\n"
                    "üîÑ Tekrar denemek i√ßin: /start ‚Üí üîë API Ayarlarƒ±"
                )
                return
            
            try:
                # Initialize failure counter if not exists
                failures = context.user_data.get('api_failures', 0)
                
                # ‚úÖ USE ROBUST VALIDATOR
                api_key, secret_key, passphrase = InputValidator.validate_api_triplet(text)
                
                # ‚úÖ SUCCESS: Save API credentials
                bot.update_setting(user_id, 'api_key', api_key)
                bot.update_setting(user_id, 'secret_key', secret_key)
                bot.update_setting(user_id, 'passphrase', passphrase)
                
                # ‚úÖ SUCCESS: Clear waiting state with timeout manager
                timeout_manager.clear_user_state(user_id, context)
                
                await update.message.reply_text(
                    "‚úÖ **API Bilgileri Kaydedildi!**\n\n"
                    "üîë Bitget API ba≈üarƒ±yla ayarlandƒ±\n"
                    "üöÄ Artƒ±k otomatik sistem aktif\n\n"
                    "üìã /start ile men√ºye d√∂n",
                    parse_mode='Markdown'
                )
                logger.info(f"‚úÖ API credentials saved successfully for user {user_id}")
                
            except ValidationError as ve:
                # ‚úÖ VALIDATION ERROR: Increment failures and give feedback
                failures += 1
                context.user_data['api_failures'] = failures
                
                error_msg = str(ve)
                if failures >= 3:
                    # ‚úÖ TOO MANY FAILURES: Clear state with timeout manager
                    timeout_manager.clear_user_state(user_id, context)
                    error_msg += "\n\nüÜò **√áok fazla hata!**\n‚ö†Ô∏è Yardƒ±m i√ßin: /start ‚Üí üîë API Ayarlarƒ±"
                else:
                    error_msg += f"\n\nüî¢ Deneme: {failures}/3\nüîô /start ile √ßƒ±k"
                
                await update.message.reply_text(error_msg)
                logger.warning(f"API validation failed for user {user_id}: {ve} (attempt {failures})")
                
            except Exception as e:
                # ‚úÖ DATABASE ERROR: Reset state with timeout manager
                timeout_manager.clear_user_state(user_id, context)
                
                logger.error(f"‚ùå API save error for user {user_id}: {e}")
                await update.message.reply_text(
                    "‚ùå **Sistem hatasƒ±!**\n\n"
                    "API kaydederken problem olu≈ütu\n"
                    "üîô /start ile tekrar dene"
                )
        
        else:
            # ‚úÖ NOT WAITING FOR API: Inform user politely
            await update.message.reply_text(
                "‚ÑπÔ∏è ≈ûu an bir giri≈ü beklenmiyordu\n\nüìä /start ile men√ºye git"
            )
            
    except Exception as e:
        # ‚úÖ GLOBAL PROTECTION: Never let bot crash
        logger.error(f"‚ùå CRITICAL: Message handler crashed for user {user_id if 'user_id' in locals() else 'unknown'}: {e}")
        try:
            if update and update.message:
                await update.message.reply_text(
                    "‚ö†Ô∏è **Ge√ßici sistem hatasƒ±**\n\n"
                    "L√ºtfen /start ile yeniden deneyin"
                )
        except:
            # Even replying failed - log and continue
            logger.error(f"‚ùå FATAL: Could not send error message: {e}")
        
        # ‚úÖ EMERGENCY: Clear any waiting states to prevent stuck users
        if 'context' in locals() and 'user_id' in locals():
            try:
                timeout_manager.clear_user_state(user_id, context)
            except:
                try:
                    context.user_data.clear()
                except:
                    pass

# ‚úÖ GLOBAL ERROR HANDLER - Prevents application crashes
async def global_error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Global error handler to catch all unhandled exceptions
    Ensures bot stays responsive even with unexpected errors
    """
    try:
        # Log the error without PII
        error = context.error
        logger.error(f"üö® GLOBAL ERROR HANDLER: {type(error).__name__}: {error}")
        
        # Try to extract user info safely  
        user_id = None
        if update and hasattr(update, 'effective_user') and update.effective_user:
            user_id = update.effective_user.id
        elif update and hasattr(update, 'callback_query') and update.callback_query:
            user_id = update.callback_query.from_user.id
        
        # Try to send a user-friendly error message if possible
        if update and hasattr(update, 'message') and update.message:
            try:
                await update.message.reply_text(
                    "‚ö†Ô∏è **Ge√ßici sistem hatasƒ±**\n\n"
                    "Bot ge√ßici olarak yanƒ±t veremedi\n"
                    "L√ºtfen /start ile tekrar deneyin"
                )
            except:
                pass  # If we can't even send error message, just log
        elif update and hasattr(update, 'callback_query') and update.callback_query:
            try:
                await update.callback_query.message.reply_text(
                    "‚ö†Ô∏è **Ge√ßici sistem hatasƒ±**\n\n"
                    "Bot ge√ßici olarak yanƒ±t veremedi\n"
                    "L√ºtfen /start ile tekrar deneyin"
                )
            except:
                pass  # If we can't even send error message, just log
        
        # Emergency user state cleanup to prevent stuck states
        if user_id and context.user_data:
            try:
                context.user_data.clear()
                logger.info(f"‚úÖ Emergency state cleared for user {user_id}")
            except:
                pass  # Even cleanup can fail, that's ok
                
        # Log that we handled the error and bot continues
        logger.info("‚úÖ Global error handled, bot continues running")
        
    except Exception as emergency_error:
        # Even our error handler failed - this is very rare
        logger.critical(f"üí• CRITICAL: Global error handler itself failed: {emergency_error}")
        # Bot will continue running anyway due to application architecture

def main():
    if not BOT_TOKEN:
        print("‚ùå TELEGRAM_BOT_TOKEN bulunamadƒ±!")
        return
        
    application = Application.builder().token(BOT_TOKEN).build()
    
    # ‚úÖ ADD GLOBAL ERROR HANDLER FIRST (highest priority)
    application.add_error_handler(global_error_handler)
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    
    print("üöÄ √áALI≈ûAN TELEGRAM BOT ba≈ülatƒ±lƒ±yor...")
    print("‚úÖ Callback problemleri √ß√∂z√ºld√º!")
    print("‚úÖ Architect √∂nerileri uygulandƒ±")
    print("‚úÖ Fast callback + background tasks")
    print("‚úÖ Robust error handling active")
    print("‚úÖ User state timeout protection")
    
    # Start heartbeat for supervisor health monitoring
    start_heartbeat()
    
    # ‚úÖ PERIODIC STATE CLEANUP (will run in background when needed)
    async def periodic_state_cleanup(context):
        """Job queue task to cleanup expired user states"""
        try:
            await timeout_manager.check_and_cleanup_expired_states(application)
            logger.info("üßπ Periodic state cleanup completed")
        except Exception as e:
            logger.error(f"‚ùå Periodic cleanup error: {e}")
    
    # Schedule periodic cleanup every 10 minutes using job queue
    if application.job_queue:
        application.job_queue.run_repeating(
            periodic_state_cleanup, 
            interval=600,  # 10 minutes
            first=600      # Start after 10 minutes
        )
        logger.info("‚úÖ Periodic state cleanup scheduled")
    
    # ‚úÖ Architect √∂nerisi: Eski callback'leri temizle
    application.run_polling(
        drop_pending_updates=True,
        allowed_updates=Update.ALL_TYPES
    )

if __name__ == '__main__':
    main()